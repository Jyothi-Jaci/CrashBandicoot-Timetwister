 name="P:System.Reflection.FieldInfo.IsFamily">
      <summary>Ottiene un valore che indica se la visibilità di questo campo è descritta da <see cref="F:System.Reflection.FieldAttributes.Family" />, ovvero se il campo è visibile solo all'interno della relativa classe e delle classi derivate.</summary>
      <returns>true se l'accesso al campo è descritto esattamente da <see cref="F:System.Reflection.FieldAttributes.Family" />; in caso contrario false.</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsFamilyAndAssembly">
      <summary>Ottiene un valore che indica se la visibilità di questo campo è descritta da <see cref="F:System.Reflection.FieldAttributes.FamANDAssem" />, ovvero se è possibile accedere al campo da classi derivate, ma solo se appartenenti allo stesso assembly.</summary>
      <returns>true se l'accesso al campo è descritto esattamente da <see cref="F:System.Reflection.FieldAttributes.FamANDAssem" />; in caso contrario false.</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsFamilyOrAssembly">
      <summary>Ottiene un valore che indica se la visibilità potenziale di questo campo è descritta da <see cref="F:System.Reflection.FieldAttributes.FamORAssem" />, ovvero se è possibile accedere al campo da classi derivate indipendentemente dalla posizione e da classi appartenenti allo stesso assembly.</summary>
      <returns>true se l'accesso al campo è descritto esattamente da <see cref="F:System.Reflection.FieldAttributes.FamORAssem" />; in caso contrario false.</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsInitOnly">
      <summary>Ottiene un valore che indica se il campo può essere impostato solo nel corpo del costruttore.</summary>
      <returns>true se l'attributo InitOnly del campo è impostato; in caso contrario false.</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsLiteral">
      <summary>Ottiene un valore che indica se il valore viene scritto in fase di compilazione e non può essere modificato.</summary>
      <returns>true se l'attributo Literal del campo è impostato; in caso contrario false.</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsPrivate">
      <summary>Ottiene un valore che indica se il campo è privato.</summary>
      <returns>true se il campo è privato; in caso contrario,false.</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsPublic">
      <summary>Ottiene un valore che indica se il campo è pubblico.</summary>
      <returns>true se il campo è pubblico; in caso contrario,false.</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsSpecialName">
      <summary>Ottiene un valore che indica se l'attributo SpecialName corrispondente è impostato sull'enumeratore <see cref="T:System.Reflection.FieldAttributes" />.</summary>
      <returns>true se l'attributo SpecialName è impostato in <see cref="T:System.Reflection.FieldAttributes" />; in caso contrario, false.</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsStatic">
      <summary>Ottiene un valore che indica se il campo è statico.</summary>
      <returns>true se il campo è statico; in caso contrario,false.</returns>
    </member>
    <member name="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
      <summary>Imposta il valore del campo supportato dall'oggetto indicato.</summary>
      <param name="obj">Oggetto il cui valore di campo deve essere impostato. </param>
      <param name="value">Valore da assegnare al campo. </param>
      <exception cref="T:System.FieldAccessException">Nell'API.NET per le applicazioni Windows o nella Libreria di classi portabile, rilevare piuttosto l'eccezione della classe di base <see cref="T:System.MemberAccessException" />.Il chiamante non dispone delle autorizzazioni per accedere a questo campo. </exception>
      <exception cref="T:System.Reflection.TargetException">Nell'API.NET per le applicazioni Windows o nella Libreria di classi portabile, rilevare piuttosto <see cref="T:System.Exception" />.Il parametro <paramref name="obj" /> è null e il campo è di istanza. </exception>
      <exception cref="T:System.ArgumentException">Il campo non esiste sull'oggetto.- oppure - Non è possibile convertire e memorizzare nel campo il parametro <paramref name="value" />. </exception>
    </member>
    <member name="T:System.Reflection.IntrospectionExtensions">
      <summary>Contiene metodi per convertire gli oggetti <see cref="T:System.Type" /> .</summary>
    </member>
    <member name="M:System.Reflection.IntrospectionExtensions.GetTypeInfo(System.Type)">
      <summary>Restituisce la rappresentazione <see cref="T:System.Reflection.TypeInfo" /> del tipo specificato.</summary>
      <returns>Oggetto convertito.</returns>
      <param name="type">Tipo da convertire.</param>
    </member>
    <member name="T:System.Reflection.IReflectableType">
      <summary>Rappresenta un tipo su cui è possibile eseguire la reflection.</summary>
    </member>
    <member name="M:System.Reflection.IReflectableType.GetTypeInfo">
      <summary>Recupera un oggetto che rappresenta il tipo.</summary>
      <returns>Oggetto che rappresenta il tipo.</returns>
    </member>
    <member name="T:System.Reflection.LocalVariableInfo">
      <summary>Individua gli attributi di una variabile locale e consente di accedere ai relativi metadati.</summary>
    </member>
    <member name="M:System.Reflection.LocalVariableInfo.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Reflection.LocalVariableInfo" />.</summary>
    </member>
    <member name="P:System.Reflection.LocalVariableInfo.IsPinned">
      <summary>Ottiene un valore <see cref="T:System.Boolean" /> che indica se l'oggetto a cui fa riferimento la variabile locale è bloccato in memoria.</summary>
      <returns>true se l'oggetto a cui fa riferimento la variabile è bloccato in memoria; in caso contrario, false.</returns>
    </member>
    <member name="P:System.Reflection.LocalVariableInfo.LocalIndex">
      <summary>Ottiene l'indice della variabile locale all'interno del corpo del metodo.</summary>
      <returns>Integer che rappresenta l'ordine di dichiarazione della variabile locale all'interno del corpo del metodo.</returns>
    </member>
    <member name="P:System.Reflection.LocalVariableInfo.LocalType">
      <summary>Ottiene il tipo della variabile locale.</summary>
      <returns>Tipo della variabile locale.</returns>
    </member>
    <member name="M:System.Reflection.LocalVariableInfo.ToString">
      <summary>Restituisce una stringa leggibile dall'utente che descrive la variabile locale.</summary>
      <returns>Stringa che fornisce informazioni sulla variabile locale, inclusi il nome del tipo, l'indice e lo stato di blocco.</returns>
    </member>
    <member name="T:System.Reflection.ManifestResourceInfo">
      <summary>Fornisce accesso a risorse del manifesto, corrispondenti a file XML che descrivono dipendenze dell'applicazione.  </summary>
    </member>
    <member name="M:System.Reflection.ManifestResourceInfo.#ctor(System.Reflection.Assembly,System.String,System.Reflection.ResourceLocation)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Reflection.ManifestResourceInfo" /> per una risorsa contenuta dall'assembly e dal file specificati, caratterizzata dal percorso specificato.</summary>
      <param name="containingAssembly">Assembly che contiene la risorsa del manifesto.</param>
      <param name="containingFileName">Nome del file che contiene la risorsa del manifesto, se il file non equivale al file del manifesto.</param>
      <param name="resourceLocation">Combinazione bit per bit di valori di enumerazione che fornisce informazioni sul percorso della risorsa del manifesto. </param>
    </member>
    <member name="P:System.Reflection.ManifestResourceInfo.FileName">
      <summary>Ottiene il nome del file che contiene la risorsa del manifesto, se non equivale al file del manifesto.  </summary>
      <returns>Nome del file della risorsa di manifesto.</returns>
    </member>
    <member name="P:System.Reflection.ManifestResourceInfo.ReferencedAssembly">
      <summary>Ottiene l'assembly contenitore della risorsa del manifesto. </summary>
      <returns>Assembly contenitore della risorsa del manifesto.</returns>
    </member>
    <member name="P:System.Reflection.ManifestResourceInfo.ResourceLocation">
      <summary>Ottiene il percorso della risorsa del manifesto. </summary>
      <returns>Combinazione bit per bit di flag <see cref="T:System.Reflection.ResourceLocation" /> che indica il percorso della risorsa del manifesto. </returns>
    </member>
    <member name="T:System.Reflection.MemberInfo">
      <summary>Ottiene informazioni sugli attributi di un membro e fornisce accesso ai relativi metadati.</summary>
    </member>
    <member name="P:System.Reflection.MemberInfo.CustomAttributes">
      <summary>Ottiene una raccolta che contiene gli attributi personalizzati del membro.</summary>
      <returns>Raccolta che contiene gli attributi personalizzati del membro.</returns>
    </member>
    <member name="P:System.Reflection.MemberInfo.DeclaringType">
      <summary>Ottiene la classe che dichiara questo membro.</summary>
      <returns>Oggetto Type per la classe che dichiara questo membro.</returns>
    </member>
    <member name="M:System.Reflection.MemberInfo.Equals(System.Object)">
      <summary>Restituisce un valore che indica se l'istanza è uguale a un oggetto specificato.</summary>
      <returns>true se <paramref name="obj" /> è uguale al tipo e al valore di questa istanza. In caso contrario, false.</returns>
      <param name="obj">Oggetto da confrontare con questa istanza o null.</param>
    </member>
    <member name="M:System.Reflection.MemberInfo.GetHashCode">
      <summary>Restituisce il codice hash per l'istanza.</summary>
      <returns>Codice hash integer con segno a 32 bit.</returns>
    </member>
    <member name="P:System.Reflection.MemberInfo.Module">
      <summary>Ottiene il modulo in cui viene definito il tipo che dichiara il membro rappresentato dall'oggetto <see cref="T:System.Reflection.MemberInfo" /> corrente.</summary>
      <returns>Oggetto <see cref="T:System.Reflection.Module" /> in cui viene definito il tipo che dichiara il membro rappresentato dall'oggetto <see cref="T:System.Reflection.MemberInfo" /> corrente.</returns>
      <exception cref="T:System.NotImplementedException">Il metodo non è implementato.</exception>
    </member>
    <member name="P:System.Reflection.MemberInfo.Name">
      <summary>Ottiene il nome del membro corrente.</summary>
      <returns>
        <see cref="T:System.String" /> che contiene il nome di questo membro.</returns>
    </member>
    <member name="T:System.Reflection.MethodBase">
      <summary>Fornisce informazioni su metodi e costruttori. </summary>
    </member>
    <member name="P:System.Reflection.MethodBase.Attributes">
      <summary>Ottiene gli attributi associati a questo metodo.</summary>
      <returns>Uno dei valori di <see cref="T:System.Reflection.MethodAttributes" />.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.CallingConvention">
      <summary>Ottiene un valore che indica le convenzioni di chiamata per questo metodo.</summary>
      <returns>Oggetto <see cref="T:System.Reflection.CallingConventions" /> per questo metodo.</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.ContainsGenericParameters">
      <summary>Ottiene un valore che indica se il metodo generico contiene parametri di tipo generico non assegnati.</summary>
      <returns>true se l'oggetto <see cref="T:System.Reflection.MethodBase" /> corrente rappresenta un metodo generico contenente parametri di tipo generico non assegnati; in caso contrario, false.</returns>
    </member>
    <member name="M:System.Reflection.MethodBase.Equals(System.Object)">
      <summary>Restituisce un valore che indica se l'istanza è uguale a un oggetto specificato.</summary>
      <returns>true se <paramref name="obj" /> è uguale al tipo e al valore di questa istanza. In caso contrario, false.</returns>
      <param name="obj">Oggetto da confrontare con questa istanza o null.</param>
    </member>
    <member name="M:System.Reflection.MethodBase.GetGenericArguments">
      <summary>Restituisce una matrice di oggetti <see cref="T:System.Type" /> che rappresentano gli argomenti di tipo di un metodo generico o i parametri di tipo della definizione di un metodo generico.</summary>
      <returns>Matrice di oggetti <see cref="T:System.Type" /> che rappresentano gli argomenti di tipo di un metodo generico o i parametri di tipo della definizione di un metodo generica.Restituisce una matrice vuota se il metodo corrente non è un metodo generico.</returns>
      <exception cref="T:System.NotSupportedException">L'oggetto corrente è un <see cref="T:System.Reflection.ConstructorInfo" />.I costruttori generici non sono supportati in .NET Framework versione 2.0.Questa eccezione rappresenta il comportamento predefinito se non viene eseguito l'override del metodo in una classe derivata.</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.GetHashCode">
      <summary>Restituisce il codice hash per l'istanza.</summary>
      <returns>Codice hash integer con segno a 32 bit.</returns>
    </member>
    <member name="M:System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)">
      <summary>Ottiene le informazioni sul metodo utilizzando la rappresentazione interna dei metadati (handle) del metodo.</summary>
      <returns>MethodBase contenente informazioni sul metodo.</returns>
      <param name="handle">Handle del metodo. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="handle" /> non è valido.</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)">
      <summary>Ottiene un oggetto <see cref="T:System.Reflection.MethodBase" /> per il costruttore o il metodo rappresentati dall'handle specificato, per il tipo generico specificato.</summary>
      <returns>Oggetto <see cref="T:System.Reflection.MethodBase" /> che rappresenta il metodo o il costruttore specificati da <paramref name="handle" />, nel tipo generico specificato da <paramref name="declaringType" />.</returns>
      <param name="handle">Handle per la rappresentazione dei metadati interni di un costruttore o di un metodo.</param>
      <param name="declaringType">Handle al tipo generico che definisce il costruttore o il metodo.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="handle" /> non è valido.</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.GetParameters">
      <summary>Quando viene sottoposto a override in una classe derivata, ottiene i parametri del metodo o del costruttore specificato.</summary>
      <returns>Matrice di tipo ParameterInfo contenente le informazioni corrispondenti alla firma del metodo (o del costruttore) ottenuto mediante reflection da questa istanza di MethodBase.</returns>
    </member>
    <member name="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])">
      <summary>Richiama il metodo o il costruttore rappresentati dall'istanza corrente utilizzando i parametri specificati.</summary>
      <returns>Oggetto contenente il valore restituito del metodo richiamato oppure null nel caso di un costruttore.AttenzioneÈ possibile che anche elementi della matrice di <paramref name="parameters" /> che rappresentano parametri dichiarati con la parola chiave ref o out vengano modificati.</returns>
      <param name="obj">L'oggetto su cui richiamare il metodo o il costruttore.Se un metodo è statico, questo argomento viene ignorato.Se un costruttore è statico, questo argomento deve essere null oppure un'istanza della classe che definisce il costruttore.</param>
      <param name="parameters">Elenco di argomenti per il metodo o il costruttore richiamato.È rappresentato da una matrice di oggetti che contiene lo stesso numero, ordine e tipo dei parametri del metodo o del costruttore da richiamare.In assenza di parametri, <paramref name="parameters" /> deve essere null.Se il metodo o il costruttore rappresentato da questa istanza accetta un parametro ref (ByRef in Visual Basic), non sono richiesti attributi speciali per tale parametro per poter richiamare il metodo o il costruttore tramite la funzione.Gli oggetti dell'array non inizializzati in modo esplicito con un valore conterranno il valore predefinito per il tipo di oggetto in questione.Per gli elementi di tipo riferimento, questo valore è null.Per gli elementi di tipo valore, questo valore è 0, 0.0 o false, a seconda del tipo di elemento specifico.</param>
      <exception cref="T:System.Reflection.TargetException">Nell'API.NET per le applicazioni Windows o nella Libreria di classi portabile, rilevare piuttosto <see cref="T:System.Exception" />.Il parametro <paramref name="obj" /> è null e il metodo non è static.In alternativa Il metodo non è dichiarato né ereditato dalla classe di <paramref name="obj" />. In alternativaViene richiamato un costruttore statico e <paramref name="obj" /> non è null né un'istanza della classe che ha dichiarato il costruttore.</exception>
      <exception cref="T:System.ArgumentException">Gli elementi della matrice di <paramref name="parameters" /> non corrispondono alla firma del metodo o del costruttore ottenuto mediante reflection da questa istanza. </exception>
      <exception cref="T:System.Reflection.TargetInvocationException">Il metodo o il costruttore richiamato genera un'eccezione. In alternativaL'istanza corrente è un oggetto <see cref="T:System.Reflection.Emit.DynamicMethod" /> contenente codice non verificabile.Vedere la sezione "Verifica" nelle note per <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">La matrice <paramref name="parameters" /> non contiene il numero corretto di argomenti. </exception>
      <exception cref="T:System.MethodAccessException">Nell'API.NET per le applicazioni Windows o nella Libreria di classi portabile, rilevare piuttosto l'eccezione della classe di base <see cref="T:System.MemberAccessException" />.Il chiamante non è autorizzato a eseguire il metodo o il costruttore rappresentato dall'istanza corrente. </exception>
      <exception cref="T:System.InvalidOperationException">Il tipo che dichiara il metodo è un tipo generico aperto,ovvero la proprietà <see cref="P:System.Type.ContainsGenericParameters" /> restituisce true per il tipo dichiarante.</exception>
      <exception cref="T:System.NotSupportedException">L'istanza corrente è <see cref="T:System.Reflection.Emit.MethodBuilder" />.</exception>
    </member>
    <member name="P:System.Reflection.MethodBase.IsAbstract">
      <summary>Ottiene un valore che indica se il metodo è astratto.</summary>
  